name: Grain Relay Uptime Monitor

on:
  schedule:
    # Every 5 minutes during business hours (UTC)
    - cron: '*/5 8-20 * * *'
    # Every 15 minutes during off-hours
    - cron: '*/15 21-23,0-7 * * *'
  workflow_dispatch: # Allow manual runs
  push:
    paths:
      - '.github/workflows/uptime.yml'

jobs:
  monitor:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies
        run: |
          npm init -y
          npm install ws node-fetch@2

      - name: Monitor Grain Relay
        run: |
          cat > monitor.js << 'EOF'
          const WebSocket = require('ws');
          const fetch = require('node-fetch');
          const fs = require('fs');
          const path = require('path');

          const RELAY_URL = 'wheat.happytavern.co';
          const WS_URL = `wss://${RELAY_URL}`;
          const HTTP_URL = `https://${RELAY_URL}`;

          class RelayMonitor {
            constructor() {
              this.results = {
                timestamp: new Date().toISOString(),
                checks: {},
                overall: {
                  status: 'unknown',
                  responseTime: 0,
                  uptime: 0
                }
              };
            }

            async sleep(ms) {
              return new Promise(resolve => setTimeout(resolve, ms));
            }

            async testWebSocket() {
              return new Promise((resolve) => {
                const startTime = Date.now();
                const timeout = setTimeout(() => {
                  resolve({
                    status: 'down',
                    responseTime: 10000,
                    error: 'Connection timeout'
                  });
                }, 10000);

                try {
                  const ws = new WebSocket(WS_URL);
                  
                  ws.on('open', () => {
                    const connectTime = Date.now() - startTime;
                    
                    // Send a basic REQ message
                    const reqId = 'monitor-' + Date.now();
                    const reqMessage = JSON.stringify([
                      "REQ", 
                      reqId, 
                      { "kinds": [0], "limit": 1 }
                    ]);
                    
                    ws.send(reqMessage);
                    
                    // Wait for response or EOSE
                    const responseTimeout = setTimeout(() => {
                      ws.close();
                      clearTimeout(timeout);
                      resolve({
                        status: 'down',
                        responseTime: Date.now() - startTime,
                        error: 'No response to REQ'
                      });
                    }, 5000);

                    ws.on('message', (data) => {
                      try {
                        const message = JSON.parse(data.toString());
                        if (message[0] === 'EOSE' && message[1] === reqId) {
                          clearTimeout(responseTimeout);
                          clearTimeout(timeout);
                          ws.close();
                          resolve({
                            status: 'up',
                            responseTime: Date.now() - startTime,
                            details: 'WebSocket and REQ/EOSE working'
                          });
                        }
                      } catch (e) {
                        // Continue waiting for proper response
                      }
                    });
                  });

                  ws.on('error', (error) => {
                    clearTimeout(timeout);
                    resolve({
                      status: 'down',
                      responseTime: Date.now() - startTime,
                      error: error.message
                    });
                  });

                } catch (error) {
                  clearTimeout(timeout);
                  resolve({
                    status: 'down',
                    responseTime: Date.now() - startTime,
                    error: error.message
                  });
                }
              });
            }

            async testNIP11() {
              const startTime = Date.now();
              try {
                const response = await fetch(HTTP_URL, {
                  method: 'GET',
                  headers: {
                    'Accept': 'application/nostr+json',
                    'User-Agent': 'Grain-Monitor/1.0'
                  },
                  timeout: 10000
                });

                const responseTime = Date.now() - startTime;
                
                if (!response.ok) {
                  return {
                    status: 'down',
                    responseTime,
                    error: `HTTP ${response.status}: ${response.statusText}`
                  };
                }

                const data = await response.json();
                
                // Verify basic NIP-11 structure
                const hasRequiredFields = data.name && data.description;
                
                return {
                  status: hasRequiredFields ? 'up' : 'degraded',
                  responseTime,
                  details: hasRequiredFields ? 'NIP-11 info valid' : 'Missing required NIP-11 fields',
                  data: {
                    name: data.name,
                    description: data.description,
                    version: data.version,
                    supported_nips: data.supported_nips
                  }
                };

              } catch (error) {
                return {
                  status: 'down',
                  responseTime: Date.now() - startTime,
                  error: error.message
                };
              }
            }

            async runAllChecks() {
              console.log('🌾 Starting Grain relay monitoring...');
              
              // Test WebSocket connectivity
              console.log('Testing WebSocket connection...');
              this.results.checks.websocket = await this.testWebSocket();
              
              // Wait a moment between checks
              await this.sleep(1000);
              
              // Test NIP-11 HTTP endpoint
              console.log('Testing NIP-11 endpoint...');
              this.results.checks.nip11 = await this.testNIP11();

              // Calculate overall status
              const allUp = Object.values(this.results.checks).every(check => check.status === 'up');
              const anyUp = Object.values(this.results.checks).some(check => check.status === 'up');
              
              if (allUp) {
                this.results.overall.status = 'up';
              } else if (anyUp) {
                this.results.overall.status = 'degraded';
              } else {
                this.results.overall.status = 'down';
              }

              // Calculate average response time
              const responseTimes = Object.values(this.results.checks).map(check => check.responseTime);
              this.results.overall.responseTime = Math.round(
                responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length
              );

              return this.results;
            }

            saveResults() {
              // Ensure directories exist
              const statusDir = path.join('docs', 'status');
              const historyDir = path.join(statusDir, 'history');
              
              if (!fs.existsSync(statusDir)) {
                fs.mkdirSync(statusDir, { recursive: true });
              }
              if (!fs.existsSync(historyDir)) {
                fs.mkdirSync(historyDir, { recursive: true });
              }

              // Save current status
              fs.writeFileSync(
                path.join(statusDir, 'status.json'),
                JSON.stringify(this.results, null, 2)
              );

              // Save to daily history
              const date = new Date().toISOString().split('T')[0];
              const historyFile = path.join(historyDir, `${date}.json`);
              
              let dayHistory = [];
              if (fs.existsSync(historyFile)) {
                dayHistory = JSON.parse(fs.readFileSync(historyFile, 'utf8'));
              }
              
              dayHistory.push({
                timestamp: this.results.timestamp,
                status: this.results.overall.status,
                responseTime: this.results.overall.responseTime,
                checks: Object.keys(this.results.checks).reduce((acc, key) => {
                  acc[key] = {
                    status: this.results.checks[key].status,
                    responseTime: this.results.checks[key].responseTime
                  };
                  return acc;
                }, {})
              });

              fs.writeFileSync(historyFile, JSON.stringify(dayHistory, null, 2));
              
              console.log('✅ Results saved');
            }

            generateSummary() {
              const status = this.results.overall.status;
              const emoji = status === 'up' ? '🟢' : status === 'degraded' ? '🟡' : '🔴';
              
              console.log(`\n${emoji} Relay Status: ${status.toUpperCase()}`);
              console.log(`⏱️  Average Response Time: ${this.results.overall.responseTime}ms`);
              console.log('\nDetailed Results:');
              
              Object.entries(this.results.checks).forEach(([checkName, result]) => {
                const checkEmoji = result.status === 'up' ? '✅' : result.status === 'degraded' ? '⚠️' : '❌';
                console.log(`  ${checkEmoji} ${checkName}: ${result.status} (${result.responseTime}ms)`);
                if (result.error) {
                  console.log(`     Error: ${result.error}`);
                }
                if (result.details) {
                  console.log(`     Details: ${result.details}`);
                }
              });
            }
          }

          // Run the monitor
          async function main() {
            const monitor = new RelayMonitor();
            const results = await monitor.runAllChecks();
            monitor.saveResults();
            monitor.generateSummary();

            // Set exit code based on overall status
            if (results.overall.status === 'down') {
              process.exit(1);
            }
          }

          main().catch(error => {
            console.error('Monitor failed:', error);
            process.exit(1);
          });
          EOF

          node monitor.js

      - name: Calculate uptime statistics
        run: |
          cat > calculate-uptime.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          function calculateUptime() {
            const historyDir = path.join('docs', 'status', 'history');
            const now = new Date();
            const stats = {
              '24h': { total: 0, up: 0 },
              '7d': { total: 0, up: 0 },
              '30d': { total: 0, up: 0 },
              '90d': { total: 0, up: 0 }
            };

            if (!fs.existsSync(historyDir)) {
              return stats;
            }

            // Get all history files
            const files = fs.readdirSync(historyDir)
              .filter(f => f.endsWith('.json'))
              .sort()
              .reverse(); // Most recent first

            for (const file of files) {
              const date = new Date(file.replace('.json', ''));
              const daysDiff = Math.floor((now - date) / (1000 * 60 * 60 * 24));
              
              if (daysDiff > 90) break;

              const dayData = JSON.parse(fs.readFileSync(path.join(historyDir, file), 'utf8'));
              
              for (const entry of dayData) {
                const periods = [];
                if (daysDiff < 1) periods.push('24h');
                if (daysDiff < 7) periods.push('7d');
                if (daysDiff < 30) periods.push('30d');
                if (daysDiff < 90) periods.push('90d');

                for (const period of periods) {
                  stats[period].total++;
                  if (entry.status === 'up') {
                    stats[period].up++;
                  }
                }
              }
            }

            // Calculate percentages
            Object.keys(stats).forEach(period => {
              const { total, up } = stats[period];
              stats[period].percentage = total > 0 ? ((up / total) * 100).toFixed(2) : '0.00';
            });

            return stats;
          }

          const stats = calculateUptime();
          
          // Save uptime stats
          fs.writeFileSync(
            path.join('docs', 'status', 'uptime.json'),
            JSON.stringify(stats, null, 2)
          );

          console.log('📊 Uptime Statistics:');
          Object.entries(stats).forEach(([period, data]) => {
            console.log(`  ${period}: ${data.percentage}% (${data.up}/${data.total})`);
          });
          EOF

          node calculate-uptime.js

      - name: Update README badges
        run: |
          # Find README file (could be README.md, readme.md, or README)
          README_FILE=""
          for file in README.md readme.md README; do
            if [ -f "$file" ]; then
              README_FILE="$file"
              break
            fi
          done

          if [ -z "$README_FILE" ]; then
            echo "No README file found, skipping badge update"
            echo "README_UPDATED=false" >> $GITHUB_ENV
            exit 0
          fi

          echo "Found README file: $README_FILE"

          # Read current status
          STATUS=$(cat docs/status/status.json | node -e "
            const data = JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8'));
            console.log(data.overall.status);
          ")

          RESPONSE_TIME=$(cat docs/status/status.json | node -e "
            const data = JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8'));
            console.log(data.overall.responseTime);
          ")

          UPTIME_24H=$(cat docs/status/uptime.json | node -e "
            const data = JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8'));
            console.log(data['24h'].percentage);
          ")

          # Determine badge color
          if [ "$STATUS" = "up" ]; then
            COLOR="brightgreen"
          elif [ "$STATUS" = "degraded" ]; then
            COLOR="yellow"
          else
            COLOR="red"
          fi

          # Check if status section exists
          if ! grep -q "## 🌾 Relay Status\|Relay Status" "$README_FILE"; then
            echo "Status section not found in $README_FILE"
            echo "Please manually add the status section to your README"
            echo "README_UPDATED=false" >> $GITHUB_ENV
            exit 0
          fi

          # Update badges if they exist
          if grep -q "!\[Status\]" "$README_FILE"; then
            sed -i "s|!\[Status\].*|![Status](https://img.shields.io/badge/Status-${STATUS}-${COLOR})|" "$README_FILE"
            echo "Updated Status badge"
          fi

          if grep -q "!\[Uptime" "$README_FILE"; then
            sed -i "s|!\[Uptime.*|![Uptime](https://img.shields.io/badge/Uptime%2024h-${UPTIME_24H}%25-${COLOR})|" "$README_FILE"
            echo "Updated Uptime badge"
          fi

          if grep -q "!\[Response Time\]" "$README_FILE"; then
            sed -i "s|!\[Response Time\].*|![Response Time](https://img.shields.io/badge/Response%20Time-${RESPONSE_TIME}ms-blue)|" "$README_FILE"
            echo "Updated Response Time badge"
          fi

          echo "README_UPDATED=true" >> $GITHUB_ENV
          echo "README_FILE=$README_FILE" >> $GITHUB_ENV

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Always add the status files
          git add docs/status/
          
          # Only add README if it was updated
          if [ "${README_UPDATED:-false}" = "true" ] && [ -n "${README_FILE:-}" ]; then
            git add "$README_FILE"
            echo "Added $README_FILE to commit"
          fi
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "🤖 Update relay status [$(date)]"
            git push
          fi

      - name: Setup GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/status/

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4