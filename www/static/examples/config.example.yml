logging:
  level: "info" # Log levels: "debug", "info", "warn", "error"
  file: "debug" # Log file name
  max_log_size_mb: 10 # Maximum log file size in MB before trimming
  structure: false # true = structured JSON logs, false = pretty logs
  check_interval_min: 10 # Check every 10 minutes
  backup_count: 2 # Keep 2 backup files (.bak1, .bak2)
  suppress_components: # Components to suppress INFO/DEBUG logs from (WARN/ERROR still shown)
    - "util" # Utility functions (file ops, IP detection, metadata loading)
    - "conn-manager" # Connection management (memory stats, connection counts)
    - "client" # Client connection details (connects/disconnects, timeouts)
    - "mongo-query" # Database query operations (can be very verbose)
    - "event-store" # Event storage operations (insert/update confirmations)
    - "close-handler" # Subscription close operations (routine cleanup)

# Available components for suppression:
# - "main"             # Main application lifecycle (startup, shutdown, restarts)
# - "mongo"            # MongoDB connection and database operations
# - "mongo-store"      # High-level event storage coordination
# - "mongo-purge"      # Event purging and cleanup operations
# - "event-handler"    # Event processing and validation coordination
# - "req-handler"      # Subscription request handling
# - "auth-handler"     # Authentication processing (NIP-42)
# - "config"           # Configuration loading and caching
# - "event-validation" # Event signature and content validation
# - "user-sync"        # User synchronization operations
# - "log"              # Logging system internal operations

# Note: Suppression only affects INFO and DEBUG levels.
# WARN and ERROR messages are always shown regardless of suppression.

mongodb:
  uri: mongodb://localhost:27017/
  database: grain

server:
  port: :8181
  read_timeout: 60 # Timeout for reading a single WebSocket message from client
  write_timeout: 20 # Timeout for writing a single WebSocket message to client
  idle_timeout: 1200 # Connection-level timeout for inactive clients (in seconds) ;  Set to 0 to disable idle timeout completely
  max_subscriptions_per_client: 10
  implicit_req_limit: 500 # Default limit applied to REQ when no limit is specified

resource_limits:
  cpu_cores: 2 # Limit the number of CPU cores the application can use
  memory_mb: 1024 # Cap the maximum amount of RAM in MB the application can use
  heap_size_mb: 512 # Set a limit on the Go garbage collector's heap size in MB

auth:
  enabled: false # Enable or disable AUTH handling
  relay_url: "wss://relay.example.com/" # Specify the relay URL

UserSync: # EXPERIMENTAL FEATURE, (structured logging not implemented yet)
  user_sync: false
  disable_at_startup: true
  initial_sync_relays: [
      "wss://purplepag.es",
      "wss://nos.lol",
      "wss://relay.damus.io",
    ] # These relays are used to initially fetch user Outboxes.
  kinds: [] # If kinds is left empty, no kind is applied to the filter and any event is retrieved
  limit: 100 # If limit is left empty, no limit will be applied to the filter
  exclude_non_whitelisted: true # if set to true, only pubkeys on the whitelist will be synced.
  interval: 360 # in minutes

backup_relay:
  enabled: false # Set to true to enable sending events to the backup relay
  url: "wss://some-relay.com" # URL of the backup relay

event_purge:
  enabled: false # Toggle to enable/disable event purging
  disable_at_startup: true # Disable purging at startup
  keep_interval_hours: 24 # Number of hours to keep events before purging
  purge_interval_minutes: 240 # Interval in minutes for running the purge
  purge_by_category: # Configure purging based on categories
    regular: true
    replaceable: false
    addressable: false
    deprecated: true
  purge_by_kind_enabled: false # Enable purging by specific kinds, if false, all collections will be purged
  kinds_to_purge: # List of event kinds to explicitly purge
    - 1
    - 2
    - 1000
  exclude_whitelisted: true # Exclude events from whitelisted pubkeys during purging

event_time_constraints:
  min_created_at: 1577836800 # January 1, 2020, as Unix timestamp
  # min_created_at_string: now-5m  # Custom value to indicate 5 minutes in the past
  # max_created_at: 0 # Set to 0 to use the default behavior of 'now'
  max_created_at_string: now+5m # Use a string to set a date for max created at in the future or past from current time

rate_limit:
  ws_limit: 50 # WebSocket messages per second
  ws_burst: 100 # Allowed burst of WebSocket messages
  event_limit: 10 # Events per second
  event_burst: 20 # Allowed burst of events
  req_limit: 5 # HTTP requests per second
  req_burst: 15 # Allowed burst of HTTP requests
  max_event_size: 524288 # 512KB - reasonable for most Nostr events - applies to both event validation AND WebSocket message buffer

  # Size limits for specific event kinds
  kind_size_limits:
    - kind: 0 # User metadata (profile info)
      max_size: 8192 # 8KB - sufficient for detailed profiles with images
    - kind: 1 # Text notes
      max_size: 4096 # 4KB - prevents spam while allowing normal posts
    - kind: 3 # Follow lists
      max_size: 65536 # 64KB - allows large Follow lists (1000+ Follows)
    - kind: 7 # Reactions (likes, etc.)
      max_size: 512 # 512B - reactions should be tiny

  # Rate limits for different event categories
  category_limits:
    regular: # Kind 1, 4-44, 1000-9999 (most social media content)
      limit: 8 # 8 events per second - most common events
      burst: 16 # Allow posting several messages quickly
    replaceable: # Kind 0, 3, 10000-19999 (profiles, contact lists)
      limit: 2 # 2 events per second - these replace previous versions
      burst: 5 # Lower burst since old events are deleted anyway
    ephemeral: # Kind 20000-29999 (temporary events, not stored)
      limit: 50 # 50 events per second - higher since not stored permanently
      burst: 100 # Allow high bursts for real-time features
    addressable: # Kind 30000-39999 (replaceable by d-tag)
      limit: 3 # 3 events per second - often larger content
      burst: 8 # Moderate burst for content creation sessions

  # Rate limits for specific event kinds
  kind_limits:
    - kind: 0
      limit: 1 # Events per second
      burst: 2 # Allowed burst
    - kind: 1
      limit: 5
      burst: 12
